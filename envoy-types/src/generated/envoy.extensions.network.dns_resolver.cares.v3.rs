// This file is @generated by prost-build.
/// Configuration for c-ares DNS resolver.
/// \[\#next-free-field: 9\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CaresDnsResolverConfig {
    ///
    /// A list of DNS resolver addresses.
    /// : ref:`use_resolvers_as_fallback <envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.use_resolvers_as_fallback>`
    ///   below dictates if the DNS client should override system defaults or only use the provided
    ///   resolvers if the system defaults are not available, i.e., as a fallback.
    #[prost(message, repeated, tag = "1")]
    pub resolvers: ::prost::alloc::vec::Vec<
        super::super::super::super::super::config::core::v3::Address,
    >,
    ///
    /// If true use the resolvers listed in the
    /// : ref:`resolvers <envoy_v3_api_field_extensions.network.dns_resolver.cares.v3.CaresDnsResolverConfig.resolvers>`
    ///   field only if c-ares is unable to obtain a
    ///   nameserver from the system (e.g., `/etc/resolv.conf`).
    ///   Otherwise, the resolvers listed in the resolvers list will override the default system
    ///   resolvers. Defaults to false.
    #[prost(bool, tag = "3")]
    pub use_resolvers_as_fallback: bool,
    /// The resolver will query available network interfaces and determine if there are no available
    /// interfaces for a given IP family. It will then filter these addresses from the results it
    /// presents. e.g., if there are no available IPv4 network interfaces, the resolver will not
    /// provide IPv4 addresses.
    #[prost(bool, tag = "4")]
    pub filter_unroutable_families: bool,
    /// Configuration of DNS resolver option flags which control the behavior of the DNS resolver.
    #[prost(message, optional, tag = "2")]
    pub dns_resolver_options: ::core::option::Option<
        super::super::super::super::super::config::core::v3::DnsResolverOptions,
    >,
    /// This option allows the number of UDP based DNS queries to be capped.
    ///
    /// .. note::
    /// This is only applicable to c-ares DNS resolver currently.
    #[prost(message, optional, tag = "5")]
    pub udp_max_queries: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt32Value,
    >,
    /// The number of seconds each name server is given to respond to a query on the first try of any given server.
    ///
    /// .. note::
    /// While the c-ares library defaults to 2 seconds, Envoy's default (if this field is unset) is 5 seconds.
    /// This adjustment was made to maintain the previous behavior after users reported an increase in DNS resolution times.
    #[prost(message, optional, tag = "6")]
    pub query_timeout_seconds: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt64Value,
    >,
    /// The maximum number of query attempts the resolver will make before giving up.
    /// Each attempt may use a different name server.
    ///
    /// .. note::
    /// While the c-ares library defaults to 3 attempts, Envoy's default (if this field is unset) is 4 attempts.
    /// This adjustment was made to maintain the previous behavior after users reported an increase in DNS resolution times.
    #[prost(message, optional, tag = "7")]
    pub query_tries: ::core::option::Option<
        super::super::super::super::super::super::google::protobuf::UInt32Value,
    >,
    /// Enable round-robin selection of name servers for DNS resolution. When enabled, the resolver will cycle through the
    /// list of name servers for each resolution request. This can help distribute the query load across multiple name
    /// servers. If disabled (default), the resolver will try name servers in the order they are configured.
    ///
    /// .. note::
    /// This setting overrides any system configuration for name server rotation.
    #[prost(bool, tag = "8")]
    pub rotate_nameservers: bool,
}
