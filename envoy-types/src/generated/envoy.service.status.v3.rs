// This file is @generated by prost-build.
/// Request for client status of clients identified by a list of NodeMatchers.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientStatusRequest {
    /// Management server can use these match criteria to identify clients.
    /// The match follows OR semantics.
    #[prost(message, repeated, tag = "1")]
    pub node_matchers: ::prost::alloc::vec::Vec<
        super::super::super::r#type::matcher::v3::NodeMatcher,
    >,
    /// The node making the csds request.
    #[prost(message, optional, tag = "2")]
    pub node: ::core::option::Option<super::super::super::config::core::v3::Node>,
    /// If true, the server will not include the resource contents in the response
    /// (i.e., the generic_xds_configs.xds_config field will not be populated).
    /// \[\#not-implemented-hide:\]
    #[prost(bool, tag = "3")]
    pub exclude_resource_contents: bool,
}
/// Detailed config (per xDS) with status.
/// \[\#next-free-field: 8\]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PerXdsConfig {
    /// Config status generated by management servers. Will not be present if the
    /// CSDS server is an xDS client.
    #[prost(enumeration = "ConfigStatus", tag = "1")]
    pub status: i32,
    /// Client config status is populated by xDS clients. Will not be present if
    /// the CSDS server is an xDS server. No matter what the client config status
    /// is, xDS clients should always dump the most recent accepted xDS config.
    ///
    /// .. attention::
    /// This field is deprecated. Use :ref:`ClientResourceStatus    <envoy_v3_api_enum_admin.v3.ClientResourceStatus>` for per-resource
    /// config status instead.
    #[deprecated]
    #[prost(enumeration = "ClientConfigStatus", tag = "7")]
    pub client_status: i32,
    #[prost(oneof = "per_xds_config::PerXdsConfig", tags = "2, 3, 4, 5, 6")]
    pub per_xds_config: ::core::option::Option<per_xds_config::PerXdsConfig>,
}
/// Nested message and enum types in `PerXdsConfig`.
pub mod per_xds_config {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum PerXdsConfig {
        #[prost(message, tag = "2")]
        ListenerConfig(super::super::super::super::admin::v3::ListenersConfigDump),
        #[prost(message, tag = "3")]
        ClusterConfig(super::super::super::super::admin::v3::ClustersConfigDump),
        #[prost(message, tag = "4")]
        RouteConfig(super::super::super::super::admin::v3::RoutesConfigDump),
        #[prost(message, tag = "5")]
        ScopedRouteConfig(super::super::super::super::admin::v3::ScopedRoutesConfigDump),
        #[prost(message, tag = "6")]
        EndpointConfig(super::super::super::super::admin::v3::EndpointsConfigDump),
    }
}
/// All xds configs for a particular client.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientConfig {
    /// Node for a particular client.
    #[prost(message, optional, tag = "1")]
    pub node: ::core::option::Option<super::super::super::config::core::v3::Node>,
    /// This field is deprecated in favor of generic_xds_configs which is
    /// much simpler and uniform in structure.
    #[deprecated]
    #[prost(message, repeated, tag = "2")]
    pub xds_config: ::prost::alloc::vec::Vec<PerXdsConfig>,
    /// Represents generic xDS config and the exact config structure depends on
    /// the type URL (like Cluster if it is CDS)
    #[prost(message, repeated, tag = "3")]
    pub generic_xds_configs: ::prost::alloc::vec::Vec<client_config::GenericXdsConfig>,
    /// For xDS clients, the scope in which the data is used.
    /// For example, gRPC indicates the data plane target or that the data is
    /// associated with gRPC server(s).
    #[prost(string, tag = "4")]
    pub client_scope: ::prost::alloc::string::String,
}
/// Nested message and enum types in `ClientConfig`.
pub mod client_config {
    /// GenericXdsConfig is used to specify the config status and the dump
    /// of any xDS resource identified by their type URL. It is the generalized
    /// version of the now deprecated ListenersConfigDump, ClustersConfigDump etc
    /// \[\#next-free-field: 10\]
    #[derive(Clone, PartialEq, ::prost::Message)]
    pub struct GenericXdsConfig {
        /// Type_url represents the fully qualified name of xDS resource type
        /// like envoy.v3.Cluster, envoy.v3.ClusterLoadAssignment etc.
        #[prost(string, tag = "1")]
        pub type_url: ::prost::alloc::string::String,
        /// Name of the xDS resource
        #[prost(string, tag = "2")]
        pub name: ::prost::alloc::string::String,
        /// This is the :ref:`version_info <envoy_v3_api_field_service.discovery.v3.DiscoveryResponse.version_info>`
        /// in the last processed xDS discovery response. If there are only
        /// static bootstrap listeners, this field will be ""
        #[prost(string, tag = "3")]
        pub version_info: ::prost::alloc::string::String,
        /// The xDS resource config. Actual content depends on the type
        #[prost(message, optional, tag = "4")]
        pub xds_config: ::core::option::Option<
            super::super::super::super::super::google::protobuf::Any,
        >,
        /// Timestamp when the xDS resource was last updated
        #[prost(message, optional, tag = "5")]
        pub last_updated: ::core::option::Option<
            super::super::super::super::super::google::protobuf::Timestamp,
        >,
        /// Per xDS resource config status. It is generated by management servers.
        /// It will not be present if the CSDS server is an xDS client.
        #[prost(enumeration = "super::ConfigStatus", tag = "6")]
        pub config_status: i32,
        /// Per xDS resource status from the view of a xDS client
        #[prost(
            enumeration = "super::super::super::super::admin::v3::ClientResourceStatus",
            tag = "7"
        )]
        pub client_status: i32,
        /// Set if the last update failed, cleared after the next successful
        /// update. The *error_state* field contains the rejected version of
        /// this particular resource along with the reason and timestamp. For
        /// successfully updated or acknowledged resource, this field should
        /// be empty.
        /// \[\#not-implemented-hide:\]
        #[prost(message, optional, tag = "8")]
        pub error_state: ::core::option::Option<
            super::super::super::super::admin::v3::UpdateFailureState,
        >,
        /// Is static resource is true if it is specified in the config supplied
        /// through the file at the startup.
        #[prost(bool, tag = "9")]
        pub is_static_resource: bool,
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientStatusResponse {
    /// Client configs for the clients specified in the ClientStatusRequest.
    #[prost(message, repeated, tag = "1")]
    pub config: ::prost::alloc::vec::Vec<ClientConfig>,
}
/// Status of a config from a management server view.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ConfigStatus {
    /// Status info is not available/unknown.
    Unknown = 0,
    /// Management server has sent the config to client and received ACK.
    Synced = 1,
    /// Config is not sent.
    NotSent = 2,
    /// Management server has sent the config to client but hasnâ€™t received
    /// ACK/NACK.
    Stale = 3,
    /// Management server has sent the config to client but received NACK. The
    /// attached config dump will be the latest config (the rejected one), since
    /// it is the persisted version in the management server.
    Error = 4,
}
impl ConfigStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unknown => "UNKNOWN",
            Self::Synced => "SYNCED",
            Self::NotSent => "NOT_SENT",
            Self::Stale => "STALE",
            Self::Error => "ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "SYNCED" => Some(Self::Synced),
            "NOT_SENT" => Some(Self::NotSent),
            "STALE" => Some(Self::Stale),
            "ERROR" => Some(Self::Error),
            _ => None,
        }
    }
}
/// Config status from a client-side view.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ClientConfigStatus {
    /// Config status is not available/unknown.
    ClientUnknown = 0,
    /// Client requested the config but hasn't received any config from management
    /// server yet.
    ClientRequested = 1,
    /// Client received the config and replied with ACK.
    ClientAcked = 2,
    /// Client received the config and replied with NACK. Notably, the attached
    /// config dump is not the NACKed version, but the most recent accepted one. If
    /// no config is accepted yet, the attached config dump will be empty.
    ClientNacked = 3,
    /// Client received an error from the control plane. The attached config
    /// dump is the most recent accepted one. If no config is accepted yet,
    /// the attached config dump will be empty.
    ClientReceivedError = 4,
}
impl ClientConfigStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::ClientUnknown => "CLIENT_UNKNOWN",
            Self::ClientRequested => "CLIENT_REQUESTED",
            Self::ClientAcked => "CLIENT_ACKED",
            Self::ClientNacked => "CLIENT_NACKED",
            Self::ClientReceivedError => "CLIENT_RECEIVED_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "CLIENT_UNKNOWN" => Some(Self::ClientUnknown),
            "CLIENT_REQUESTED" => Some(Self::ClientRequested),
            "CLIENT_ACKED" => Some(Self::ClientAcked),
            "CLIENT_NACKED" => Some(Self::ClientNacked),
            "CLIENT_RECEIVED_ERROR" => Some(Self::ClientReceivedError),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod client_status_discovery_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// CSDS is Client Status Discovery Service. It can be used to get the status of
    /// an xDS-compliant client from the management server's point of view. It can
    /// also be used to get the current xDS states directly from the client.
    #[derive(Debug, Clone)]
    pub struct ClientStatusDiscoveryServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ClientStatusDiscoveryServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ClientStatusDiscoveryServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ClientStatusDiscoveryServiceClient::new(
                InterceptedService::new(inner, interceptor),
            )
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn stream_client_status(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::ClientStatusRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ClientStatusResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/envoy.service.status.v3.ClientStatusDiscoveryService/StreamClientStatus",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "envoy.service.status.v3.ClientStatusDiscoveryService",
                        "StreamClientStatus",
                    ),
                );
            self.inner.streaming(req, path, codec).await
        }
        pub async fn fetch_client_status(
            &mut self,
            request: impl tonic::IntoRequest<super::ClientStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ClientStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/envoy.service.status.v3.ClientStatusDiscoveryService/FetchClientStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "envoy.service.status.v3.ClientStatusDiscoveryService",
                        "FetchClientStatus",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod client_status_discovery_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ClientStatusDiscoveryServiceServer.
    #[async_trait]
    pub trait ClientStatusDiscoveryService: std::marker::Send + std::marker::Sync + 'static {
        /// Server streaming response type for the StreamClientStatus method.
        type StreamClientStatusStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ClientStatusResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn stream_client_status(
            &self,
            request: tonic::Request<tonic::Streaming<super::ClientStatusRequest>>,
        ) -> std::result::Result<
            tonic::Response<Self::StreamClientStatusStream>,
            tonic::Status,
        >;
        async fn fetch_client_status(
            &self,
            request: tonic::Request<super::ClientStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ClientStatusResponse>,
            tonic::Status,
        >;
    }
    /// CSDS is Client Status Discovery Service. It can be used to get the status of
    /// an xDS-compliant client from the management server's point of view. It can
    /// also be used to get the current xDS states directly from the client.
    #[derive(Debug)]
    pub struct ClientStatusDiscoveryServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ClientStatusDiscoveryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>>
    for ClientStatusDiscoveryServiceServer<T>
    where
        T: ClientStatusDiscoveryService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/envoy.service.status.v3.ClientStatusDiscoveryService/StreamClientStatus" => {
                    #[allow(non_camel_case_types)]
                    struct StreamClientStatusSvc<T: ClientStatusDiscoveryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ClientStatusDiscoveryService,
                    > tonic::server::StreamingService<super::ClientStatusRequest>
                    for StreamClientStatusSvc<T> {
                        type Response = super::ClientStatusResponse;
                        type ResponseStream = T::StreamClientStatusStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::ClientStatusRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientStatusDiscoveryService>::stream_client_status(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = StreamClientStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/envoy.service.status.v3.ClientStatusDiscoveryService/FetchClientStatus" => {
                    #[allow(non_camel_case_types)]
                    struct FetchClientStatusSvc<T: ClientStatusDiscoveryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ClientStatusDiscoveryService,
                    > tonic::server::UnaryService<super::ClientStatusRequest>
                    for FetchClientStatusSvc<T> {
                        type Response = super::ClientStatusResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ClientStatusRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ClientStatusDiscoveryService>::fetch_client_status(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FetchClientStatusSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(
                            tonic::body::Body::default(),
                        );
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ClientStatusDiscoveryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "envoy.service.status.v3.ClientStatusDiscoveryService";
    impl<T> tonic::server::NamedService for ClientStatusDiscoveryServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
