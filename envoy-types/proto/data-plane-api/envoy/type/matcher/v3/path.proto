// Copyright 2025 Envoy Project Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package envoy.type.matcher.v3;

import "envoy/type/matcher/v3/string.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.type.matcher.v3";
option java_outer_classname = "PathProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/type/matcher/v3;matcherv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Path matcher]

// Specifies the way to match a path on HTTP request.
message PathMatcher {
  option (udpa.annotations.versioning).previous_message_type = "envoy.type.matcher.PathMatcher";

  oneof rule {
    option (validate.required) = true;

    // The ``path`` must match the URL path portion of the :path header. The query and fragment
    // string (if present) are removed in the URL path portion.
    // For example, the path ``/data`` will match the ``:path`` header ``/data#fragment?param=value``.
    StringMatcher path = 1 [(validate.rules).message = {required: true}];
  }
}
