// Copyright 2025 Envoy Project Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package envoy.config.core.v3;

import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.config.core.v3";
option java_outer_classname = "UdpSocketConfigProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/config/core/v3;corev3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: UDP socket config]

// Generic UDP socket configuration.
message UdpSocketConfig {
  // The maximum size of received UDP datagrams. Using a larger size will cause Envoy to allocate
  // more memory per socket. Received datagrams above this size will be dropped. If not set
  // defaults to 1500 bytes.
  google.protobuf.UInt64Value max_rx_datagram_size = 1
      [(validate.rules).uint64 = {lt: 65536 gt: 0}];

  // Configures whether Generic Receive Offload (GRO)
  // <https://en.wikipedia.org/wiki/Large_receive_offload>_ is preferred when reading from the
  // UDP socket. The default is context dependent and is documented where UdpSocketConfig is used.
  // This option affects performance but not functionality. If GRO is not supported by the operating
  // system, non-GRO receive will be used.
  google.protobuf.BoolValue prefer_gro = 2;
}
