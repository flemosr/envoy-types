// Copyright 2025 Envoy Project Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package envoy.extensions.access_loggers.stream.v3;

import "envoy/config/core/v3/substitution_format_string.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.access_loggers.stream.v3";
option java_outer_classname = "StreamProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/access_loggers/stream/v3;streamv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Standard Streams Access loggers]

// Custom configuration for an :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`
// that writes log entries directly to the operating system's standard output.
// [#extension: envoy.access_loggers.stdout]
message StdoutAccessLog {
  oneof access_log_format {
    // Configuration to form access log data and format.
    // If not specified, use :ref:`default format <config_access_log_default_format>`.
    config.core.v3.SubstitutionFormatString log_format = 1
        [(validate.rules).message = {required: true}];
  }
}

// Custom configuration for an :ref:`AccessLog <envoy_v3_api_msg_config.accesslog.v3.AccessLog>`
// that writes log entries directly to the operating system's standard error.
// [#extension: envoy.access_loggers.stderr]
message StderrAccessLog {
  oneof access_log_format {
    // Configuration to form access log data and format.
    // If not specified, use :ref:`default format <config_access_log_default_format>`.
    config.core.v3.SubstitutionFormatString log_format = 1
        [(validate.rules).message = {required: true}];
  }
}
