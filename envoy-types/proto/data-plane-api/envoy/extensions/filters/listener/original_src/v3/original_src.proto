// Copyright 2025 Envoy Project Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package envoy.extensions.filters.listener.original_src.v3;

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.listener.original_src.v3";
option java_outer_classname = "OriginalSrcProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/listener/original_src/v3;original_srcv3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: Original Src Filter]
// Use the Original source address on upstream connections.
// [#extension: envoy.filters.listener.original_src]

// The Original Src filter binds upstream connections to the original source address determined
// for the connection. This address could come from something like the Proxy Protocol filter, or it
// could come from trusted http headers.
message OriginalSrc {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.filter.listener.original_src.v2alpha1.OriginalSrc";

  // Whether to bind the port to the one used in the original downstream connection.
  // [#not-implemented-hide:]
  bool bind_port = 1;

  // Sets the SO_MARK option on the upstream connection's socket to the provided value. Used to
  // ensure that non-local addresses may be routed back through envoy when binding to the original
  // source address. The option will not be applied if the mark is 0.
  uint32 mark = 2;
}
